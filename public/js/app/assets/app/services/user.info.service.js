"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * Created by Thisum on 8/17/2016.
 */
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var constants_1 = require("../util/constants");
var PaymentSchema_1 = require("../obj/PaymentSchema");
var request_builder_util_1 = require("../util/request-builder.util");
var UserInfoService = (function () {
    function UserInfoService(_http) {
        this._http = _http;
        this.baseUrl = constants_1.BASE_URL + '/admin';
    }
    UserInfoService.prototype.loadPaymentSchema = function () {
        var headers = request_builder_util_1.getHeader();
        var url = this.baseUrl + '/getschema';
        return this._http.get(url, { headers: headers, body: {} }).toPromise()
            .then(function (response) {
            var status = response.json().status;
            if (status == constants_1.SERVER_RESPONSE_STATUS.SUCCESS) {
                var data = response.json().result;
                var objs = [];
                for (var i = 0; i < data.length; i++) {
                    var schema = new PaymentSchema_1.PaymentSchema(data[i].service, data[i].type, data[i].name);
                    objs.push(schema);
                }
                return objs;
            }
            else if (status == constants_1.SERVER_RESPONSE_STATUS.FAILED) {
                throw new Error(response.json().message);
            }
        })
            .catch(this.handleError);
    };
    UserInfoService.prototype.addPaymentSchema = function (schema) {
        var headers = request_builder_util_1.getHeader();
        var url = this.baseUrl + '/addschema';
        return this._http.post(url, schema, { headers: headers }).toPromise()
            .then(function (response) {
            var obj = response.json();
            if (obj.status == constants_1.SERVER_RESPONSE_STATUS.SUCCESS) {
                var schema_1 = new PaymentSchema_1.PaymentSchema(obj.result.service, obj.result.type, obj.result.name);
                return schema_1;
            }
            else if (obj.status == constants_1.SERVER_RESPONSE_STATUS.FAILED) {
                throw new Error(response.json().message);
            }
        })
            .catch(this.handleError);
    };
    UserInfoService.prototype.deleteSchema = function (ps) {
    };
    UserInfoService.prototype.editSchema = function (ps) {
    };
    UserInfoService.prototype.getServiceDetails = function () {
        var headers = request_builder_util_1.getHeader();
        var url = this.baseUrl + '/getservices';
        return this._http.get(url, { headers: headers, body: {} }).toPromise()
            .then(function (response) {
            var status = response.json().status;
            if (status == constants_1.SERVER_RESPONSE_STATUS.SUCCESS) {
                return response.json().result;
            }
            else if (status == constants_1.SERVER_RESPONSE_STATUS.FAILED) {
                throw new Error(response.json().message);
            }
        })
            .catch(this.handleError);
    };
    UserInfoService.prototype.handleError = function (error) {
        console.error('Error occurred : ' + error);
        return Promise.reject(error.message || error);
    };
    UserInfoService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [http_1.Http])
    ], UserInfoService);
    return UserInfoService;
}());
exports.UserInfoService = UserInfoService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
